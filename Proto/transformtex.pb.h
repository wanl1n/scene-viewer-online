// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transformtex.proto
// Protobuf C++ Version: 5.29.3

#ifndef transformtex_2eproto_2epb_2eh
#define transformtex_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_transformtex_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_transformtex_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_transformtex_2eproto;
class TransformTexRequest;
struct TransformTexRequestDefaultTypeInternal;
extern TransformTexRequestDefaultTypeInternal _TransformTexRequest_default_instance_;
class TransformTexResponse;
struct TransformTexResponseDefaultTypeInternal;
extern TransformTexResponseDefaultTypeInternal _TransformTexResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class TransformTexResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TransformTexResponse) */ {
 public:
  inline TransformTexResponse() : TransformTexResponse(nullptr) {}
  ~TransformTexResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransformTexResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransformTexResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransformTexResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransformTexResponse(const TransformTexResponse& from) : TransformTexResponse(nullptr, from) {}
  inline TransformTexResponse(TransformTexResponse&& from) noexcept
      : TransformTexResponse(nullptr, std::move(from)) {}
  inline TransformTexResponse& operator=(const TransformTexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformTexResponse& operator=(TransformTexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformTexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformTexResponse* internal_default_instance() {
    return reinterpret_cast<const TransformTexResponse*>(
        &_TransformTexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TransformTexResponse& a, TransformTexResponse& b) { a.Swap(&b); }
  inline void Swap(TransformTexResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformTexResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformTexResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransformTexResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransformTexResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransformTexResponse& from) { TransformTexResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransformTexResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TransformTexResponse"; }

 protected:
  explicit TransformTexResponse(::google::protobuf::Arena* arena);
  TransformTexResponse(::google::protobuf::Arena* arena, const TransformTexResponse& from);
  TransformTexResponse(::google::protobuf::Arena* arena, TransformTexResponse&& from) noexcept
      : TransformTexResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTextureFieldNumber = 12,
    kPosXFieldNumber = 1,
    kPosYFieldNumber = 2,
    kPosZFieldNumber = 3,
    kPitchFieldNumber = 4,
    kYawFieldNumber = 5,
    kRollFieldNumber = 6,
    kScaleXFieldNumber = 7,
    kScaleYFieldNumber = 8,
    kScaleZFieldNumber = 9,
    kTexWidthFieldNumber = 10,
    kTexHeightFieldNumber = 11,
  };
  // bytes texture = 12;
  void clear_texture() ;
  const std::string& texture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_texture(Arg_&& arg, Args_... args);
  std::string* mutable_texture();
  PROTOBUF_NODISCARD std::string* release_texture();
  void set_allocated_texture(std::string* value);

  private:
  const std::string& _internal_texture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_texture(
      const std::string& value);
  std::string* _internal_mutable_texture();

  public:
  // float posX = 1;
  void clear_posx() ;
  float posx() const;
  void set_posx(float value);

  private:
  float _internal_posx() const;
  void _internal_set_posx(float value);

  public:
  // float posY = 2;
  void clear_posy() ;
  float posy() const;
  void set_posy(float value);

  private:
  float _internal_posy() const;
  void _internal_set_posy(float value);

  public:
  // float posZ = 3;
  void clear_posz() ;
  float posz() const;
  void set_posz(float value);

  private:
  float _internal_posz() const;
  void _internal_set_posz(float value);

  public:
  // float pitch = 4;
  void clear_pitch() ;
  float pitch() const;
  void set_pitch(float value);

  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);

  public:
  // float yaw = 5;
  void clear_yaw() ;
  float yaw() const;
  void set_yaw(float value);

  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);

  public:
  // float roll = 6;
  void clear_roll() ;
  float roll() const;
  void set_roll(float value);

  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);

  public:
  // float scaleX = 7;
  void clear_scalex() ;
  float scalex() const;
  void set_scalex(float value);

  private:
  float _internal_scalex() const;
  void _internal_set_scalex(float value);

  public:
  // float scaleY = 8;
  void clear_scaley() ;
  float scaley() const;
  void set_scaley(float value);

  private:
  float _internal_scaley() const;
  void _internal_set_scaley(float value);

  public:
  // float scaleZ = 9;
  void clear_scalez() ;
  float scalez() const;
  void set_scalez(float value);

  private:
  float _internal_scalez() const;
  void _internal_set_scalez(float value);

  public:
  // int32 texWidth = 10;
  void clear_texwidth() ;
  ::int32_t texwidth() const;
  void set_texwidth(::int32_t value);

  private:
  ::int32_t _internal_texwidth() const;
  void _internal_set_texwidth(::int32_t value);

  public:
  // int32 texHeight = 11;
  void clear_texheight() ;
  ::int32_t texheight() const;
  void set_texheight(::int32_t value);

  private:
  ::int32_t _internal_texheight() const;
  void _internal_set_texheight(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:TransformTexResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransformTexResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr texture_;
    float posx_;
    float posy_;
    float posz_;
    float pitch_;
    float yaw_;
    float roll_;
    float scalex_;
    float scaley_;
    float scalez_;
    ::int32_t texwidth_;
    ::int32_t texheight_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transformtex_2eproto;
};
// -------------------------------------------------------------------

class TransformTexRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:TransformTexRequest) */ {
 public:
  inline TransformTexRequest() : TransformTexRequest(nullptr) {}
  ~TransformTexRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TransformTexRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TransformTexRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TransformTexRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline TransformTexRequest(const TransformTexRequest& from) : TransformTexRequest(nullptr, from) {}
  inline TransformTexRequest(TransformTexRequest&& from) noexcept
      : TransformTexRequest(nullptr, std::move(from)) {}
  inline TransformTexRequest& operator=(const TransformTexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformTexRequest& operator=(TransformTexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformTexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformTexRequest* internal_default_instance() {
    return reinterpret_cast<const TransformTexRequest*>(
        &_TransformTexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TransformTexRequest& a, TransformTexRequest& b) { a.Swap(&b); }
  inline void Swap(TransformTexRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformTexRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformTexRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TransformTexRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransformTexRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TransformTexRequest& from) { TransformTexRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TransformTexRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "TransformTexRequest"; }

 protected:
  explicit TransformTexRequest(::google::protobuf::Arena* arena);
  TransformTexRequest(::google::protobuf::Arena* arena, const TransformTexRequest& from);
  TransformTexRequest(::google::protobuf::Arena* arena, TransformTexRequest&& from) noexcept
      : TransformTexRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModelNameFieldNumber = 1,
  };
  // string modelName = 1;
  void clear_modelname() ;
  const std::string& modelname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_modelname(Arg_&& arg, Args_... args);
  std::string* mutable_modelname();
  PROTOBUF_NODISCARD std::string* release_modelname();
  void set_allocated_modelname(std::string* value);

  private:
  const std::string& _internal_modelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modelname(
      const std::string& value);
  std::string* _internal_mutable_modelname();

  public:
  // @@protoc_insertion_point(class_scope:TransformTexRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TransformTexRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr modelname_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transformtex_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TransformTexRequest

// string modelName = 1;
inline void TransformTexRequest::clear_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.ClearToEmpty();
}
inline const std::string& TransformTexRequest::modelname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TransformTexRequest.modelName)
  return _internal_modelname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransformTexRequest::set_modelname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TransformTexRequest.modelName)
}
inline std::string* TransformTexRequest::mutable_modelname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_modelname();
  // @@protoc_insertion_point(field_mutable:TransformTexRequest.modelName)
  return _s;
}
inline const std::string& TransformTexRequest::_internal_modelname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.modelname_.Get();
}
inline void TransformTexRequest::_internal_set_modelname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.Set(value, GetArena());
}
inline std::string* TransformTexRequest::_internal_mutable_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.modelname_.Mutable( GetArena());
}
inline std::string* TransformTexRequest::release_modelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TransformTexRequest.modelName)
  return _impl_.modelname_.Release();
}
inline void TransformTexRequest::set_allocated_modelname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.modelname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.modelname_.IsDefault()) {
    _impl_.modelname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TransformTexRequest.modelName)
}

// -------------------------------------------------------------------

// TransformTexResponse

// float posX = 1;
inline void TransformTexResponse::clear_posx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posx_ = 0;
}
inline float TransformTexResponse::posx() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.posX)
  return _internal_posx();
}
inline void TransformTexResponse::set_posx(float value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.posX)
}
inline float TransformTexResponse::_internal_posx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posx_;
}
inline void TransformTexResponse::_internal_set_posx(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posx_ = value;
}

// float posY = 2;
inline void TransformTexResponse::clear_posy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posy_ = 0;
}
inline float TransformTexResponse::posy() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.posY)
  return _internal_posy();
}
inline void TransformTexResponse::set_posy(float value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.posY)
}
inline float TransformTexResponse::_internal_posy() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posy_;
}
inline void TransformTexResponse::_internal_set_posy(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posy_ = value;
}

// float posZ = 3;
inline void TransformTexResponse::clear_posz() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posz_ = 0;
}
inline float TransformTexResponse::posz() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.posZ)
  return _internal_posz();
}
inline void TransformTexResponse::set_posz(float value) {
  _internal_set_posz(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.posZ)
}
inline float TransformTexResponse::_internal_posz() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.posz_;
}
inline void TransformTexResponse::_internal_set_posz(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.posz_ = value;
}

// float pitch = 4;
inline void TransformTexResponse::clear_pitch() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = 0;
}
inline float TransformTexResponse::pitch() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.pitch)
  return _internal_pitch();
}
inline void TransformTexResponse::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.pitch)
}
inline float TransformTexResponse::_internal_pitch() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pitch_;
}
inline void TransformTexResponse::_internal_set_pitch(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pitch_ = value;
}

// float yaw = 5;
inline void TransformTexResponse::clear_yaw() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = 0;
}
inline float TransformTexResponse::yaw() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.yaw)
  return _internal_yaw();
}
inline void TransformTexResponse::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.yaw)
}
inline float TransformTexResponse::_internal_yaw() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yaw_;
}
inline void TransformTexResponse::_internal_set_yaw(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yaw_ = value;
}

// float roll = 6;
inline void TransformTexResponse::clear_roll() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = 0;
}
inline float TransformTexResponse::roll() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.roll)
  return _internal_roll();
}
inline void TransformTexResponse::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.roll)
}
inline float TransformTexResponse::_internal_roll() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.roll_;
}
inline void TransformTexResponse::_internal_set_roll(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.roll_ = value;
}

// float scaleX = 7;
inline void TransformTexResponse::clear_scalex() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scalex_ = 0;
}
inline float TransformTexResponse::scalex() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.scaleX)
  return _internal_scalex();
}
inline void TransformTexResponse::set_scalex(float value) {
  _internal_set_scalex(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.scaleX)
}
inline float TransformTexResponse::_internal_scalex() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scalex_;
}
inline void TransformTexResponse::_internal_set_scalex(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scalex_ = value;
}

// float scaleY = 8;
inline void TransformTexResponse::clear_scaley() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scaley_ = 0;
}
inline float TransformTexResponse::scaley() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.scaleY)
  return _internal_scaley();
}
inline void TransformTexResponse::set_scaley(float value) {
  _internal_set_scaley(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.scaleY)
}
inline float TransformTexResponse::_internal_scaley() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scaley_;
}
inline void TransformTexResponse::_internal_set_scaley(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scaley_ = value;
}

// float scaleZ = 9;
inline void TransformTexResponse::clear_scalez() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scalez_ = 0;
}
inline float TransformTexResponse::scalez() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.scaleZ)
  return _internal_scalez();
}
inline void TransformTexResponse::set_scalez(float value) {
  _internal_set_scalez(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.scaleZ)
}
inline float TransformTexResponse::_internal_scalez() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.scalez_;
}
inline void TransformTexResponse::_internal_set_scalez(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.scalez_ = value;
}

// int32 texWidth = 10;
inline void TransformTexResponse::clear_texwidth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texwidth_ = 0;
}
inline ::int32_t TransformTexResponse::texwidth() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.texWidth)
  return _internal_texwidth();
}
inline void TransformTexResponse::set_texwidth(::int32_t value) {
  _internal_set_texwidth(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.texWidth)
}
inline ::int32_t TransformTexResponse::_internal_texwidth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texwidth_;
}
inline void TransformTexResponse::_internal_set_texwidth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texwidth_ = value;
}

// int32 texHeight = 11;
inline void TransformTexResponse::clear_texheight() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texheight_ = 0;
}
inline ::int32_t TransformTexResponse::texheight() const {
  // @@protoc_insertion_point(field_get:TransformTexResponse.texHeight)
  return _internal_texheight();
}
inline void TransformTexResponse::set_texheight(::int32_t value) {
  _internal_set_texheight(value);
  // @@protoc_insertion_point(field_set:TransformTexResponse.texHeight)
}
inline ::int32_t TransformTexResponse::_internal_texheight() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texheight_;
}
inline void TransformTexResponse::_internal_set_texheight(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texheight_ = value;
}

// bytes texture = 12;
inline void TransformTexResponse::clear_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.ClearToEmpty();
}
inline const std::string& TransformTexResponse::texture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:TransformTexResponse.texture)
  return _internal_texture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransformTexResponse::set_texture(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:TransformTexResponse.texture)
}
inline std::string* TransformTexResponse::mutable_texture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_texture();
  // @@protoc_insertion_point(field_mutable:TransformTexResponse.texture)
  return _s;
}
inline const std::string& TransformTexResponse::_internal_texture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.texture_.Get();
}
inline void TransformTexResponse::_internal_set_texture(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.Set(value, GetArena());
}
inline std::string* TransformTexResponse::_internal_mutable_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.texture_.Mutable( GetArena());
}
inline std::string* TransformTexResponse::release_texture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:TransformTexResponse.texture)
  return _impl_.texture_.Release();
}
inline void TransformTexResponse::set_allocated_texture(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.texture_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.texture_.IsDefault()) {
    _impl_.texture_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:TransformTexResponse.texture)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // transformtex_2eproto_2epb_2eh
